#pragma once

namespace DoDo {
	/*lists can exist as regular lists or as backing widgets for a tree*/
	namespace ETableViewMode
	{
		enum Type
		{
			List,
			Tile,
			Tree
		};
	}
	class ITableRow;
	/*Interface for container widgets to talk to the owner list, tree, or grid*/
	template<typename ItemType>
	class ITypedTableView
	{
	public:
		/*
		* @param ItemIndexInList the index of the data item in the linearized array
		* 
		* @return nesting level within the tree:0 is root-level, 1 is children of root, etc.
		*/
		virtual int32_t private_get_nesting_depth(int32_t item_index_in_list) const = 0;

		/*
		* @param ItemIndexInList the index of the data item in the linearized array
		* 
		* @return true if the item has children
		*/
		virtual bool private_does_item_have_children(int32_t item_index_in_list) const = 0;

		/*
		* given an widget, find the corresponding data item
		* 
		* @param TheWidget a widget generated by the list view for some data item
		* 
		* @return the data item from which the widget was generated
		*/
		virtual const ItemType* private_item_from_widget(const ITableRow* the_widget) const = 0;

		/*
		* @param InItem the data item whose expansion state to query
		* 
		* @return true if the item is expanded, false otherwise
		*/
		virtual bool private_is_item_expanded(const ItemType& the_item) const = 0;

		/*
		* set whether some data item is expanded or not
		* 
		* @param InItem the item whose expansion state to control
		* @param InExpandItem if true the item should be expanded, otherwise collapsed
		*/
		virtual void private_set_item_expansion(ItemType the_item, bool b_should_be_expanded) = 0;
	};

}